import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
import io

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader


# Load your trained pipeline model
model = joblib.load("chatgpt_critical_thinking_bucketed_model_tuned.pkl")

# Mapping from bucket number to label and tips
bucket_labels = {
    0: "Low Aptitude",
    1: "Medium Aptitude",
    2: "High Aptitude"
}

bucket_tips = {
    0: "Your aptitude score is on the lower side. Consider engaging more with critical thinking exercises and practice reasoning problems regularly.",
    1: "You have a moderate aptitude level. Keep practicing and exploring new ways to improve your critical thinking skills.",
    2: "Excellent! Your aptitude score is high. Maintain your good practices and consider mentoring peers to further enhance your skills."
}

def generate_pdf_report(name, label, tips, proba):
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    margin = 50

    # ------------------ HEADER ------------------
    c.setFillColor(colors.HexColor("#0B3D91"))
    c.setFont("Helvetica-Bold", 20)
    c.drawString(margin, height - margin, "ChatGPT Aptitude Level Analysis Report")
    c.setStrokeColor(colors.HexColor("#1E5FA9"))
    c.setLineWidth(1)
    c.line(margin, height - margin - 10, width - margin, height - margin - 10)

    # ------------------ USER DETAILS ------------------
    c.setFillColor(colors.HexColor("#1E5FA9"))
    c.setFont("Helvetica", 12)
    y = height - margin - 40
    c.drawString(margin, y, f"Name: {name}")
    c.drawString(margin, y - 20, f"Predicted Aptitude Bucket: {label}")

    # ------------------ BAR CHART ------------------
    fig, ax = plt.subplots(figsize=(4, 2))
    sns.barplot(
        x=["Low", "Medium", "High"],
        y=proba * 100,
        palette=["#AED6F1", "#5DADE2", "#154360"],
        ax=ax
    )
    ax.set_ylim(0, 100)
    ax.set_ylabel("Probability (%)")
    ax.set_title("Prediction Probabilities")
    ax.bar_label(ax.containers[0], fmt="%.1f%%", padding=3)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.grid(axis='y', linestyle='--', alpha=0.6)
    ax.set_xlabel("")
    ax.set_yticks(range(0, 101, 20))
    plt.tight_layout()

    img_buffer = io.BytesIO()
    fig.savefig(img_buffer, format='PNG', dpi=150)
    plt.close(fig)
    img_buffer.seek(0)
    c.drawImage(ImageReader(img_buffer), margin, y - 180, width=350, height=120)

    # ------------------ FEEDBACK SECTION ------------------
    c.setFont("Helvetica-Bold", 14)
    c.setFillColor(colors.HexColor("#0B3D91"))
    c.drawString(margin, y - 220, "Personalized Feedback:")

    c.setFont("Helvetica", 11)
    c.setFillColor(colors.black)
    text = c.beginText(margin + 10, y - 240)
    wrap_limit = 90
    for line in tips.split('\n'):
        words = line.split()
        wrapped_line = ''
        for word in words:
            if len(wrapped_line + word) < wrap_limit:
                wrapped_line += word + ' '
            else:
                text.textLine(wrapped_line.strip())
                wrapped_line = word + ' '
        if wrapped_line:
            text.textLine(wrapped_line.strip())
    c.drawText(text)

    # ------------------ FOOTER ------------------
    c.setFont("Helvetica-Oblique", 10)
    c.setFillColor(colors.grey)
    c.drawRightString(width - margin, 30, "Generated by ChatGPT Aptitude Predictor")

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

def main():
    st.title("ChatGPT Critical Thinking Level Predictor")

    # Input form
    with st.form("input_form"):
        name = st.text_input("Name")

        cgpa = st.number_input("CGPA", min_value=0.0, max_value=10.0, step=0.01)
        freq = st.number_input("ChatGPT Usage Frequency (times per week)", min_value=0, max_value=100)
        duration = st.number_input("Average Session Duration (minutes)", min_value=0, max_value=180)

        department = st.selectbox("Department", ["CSE", "ECE", "Mechanical", "Civil", "Other"])
        reason = st.selectbox("Reason for Using ChatGPT", [
            "Learning", "Homework Help", "Coding Assistance", "Casual Chat", "Other"
        ])

        submitted = st.form_submit_button("Predict Aptitude Bucket")

    if submitted:
        # Prepare input dataframe for prediction
        input_df = pd.DataFrame({
            "CGPA": [cgpa],
            "ChatGPT_Usage_Frequency_Per_Week": [freq],
            "Average_Session_Duration_Minutes": [duration],
            "Department": [department],
            "Reason_For_Using_ChatGPT": [reason]
        })

        # Predict class and probabilities
        pred_class = model.predict(input_df)[0]
        pred_proba = model.predict_proba(input_df)[0]

        label = bucket_labels[pred_class]
        tips = bucket_tips[pred_class]

        st.subheader("Prediction Results")

        # Create two columns for side-by-side display
        col1, col2 = st.columns([1, 1])

        with col1:
            st.write(f"**Aptitude Bucket:** {label}")
            st.write("**Prediction Probabilities:**")
            st.write(f"- Low Aptitude: {pred_proba[0]*100:.1f}%")
            st.write(f"- Medium Aptitude: {pred_proba[1]*100:.1f}%")
            st.write(f"- High Aptitude: {pred_proba[2]*100:.1f}%")

        with col2:
            fig, ax = plt.subplots(figsize=(4, 2))
            sns.barplot(
                x=["Low", "Medium", "High"],
                y=pred_proba * 100,
                palette=["#AED6F1", "#5DADE2", "#154360"],
                ax=ax
            )
            ax.set_ylim(0, 100)
            ax.set_ylabel("Probability (%)")
            ax.set_title("Prediction Probabilities")
            ax.bar_label(ax.containers[0], fmt="%.1f%%", padding=3)
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.grid(axis='y', linestyle='--', alpha=0.6)
            ax.set_xlabel("")
            ax.set_yticks(range(0, 101, 20))

            st.pyplot(fig)

        st.write("### Personalized Tips")
        st.write(tips)

        # Generate PDF and add download button
        pdf_bytes = generate_pdf_report(name, label, tips, pred_proba)
        st.download_button(
            label="Download PDF Report",
            data=pdf_bytes,
            file_name=f"{name}_aptitude_report.pdf",
            mime="application/pdf"
        )


if __name__ == "__main__":
    main()
